{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAcH,SAASC,cAAc,wBACtBD,SAASC,cAAc,yBAc/BG,iBAAiB,SAAS,SAACC,G,kBAGpC,IAAIC,EAAOC,EAAQC,OAAON,EAAUO,OAASD,OAAOT,EAAWU,OAC/DC,YAAY,WAhBhB,IAAuBC,EAAUC,EACzBC,GADeF,EAiBHJ,EAAQ,EAjBKK,EAiBFN,EAhBvBO,EAAgBC,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,KAWlBO,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MACjBf,EAAAwB,OAAOC,QAAQ,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAE9DY,OAAM,SAAAJ,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAClBf,EAAAwB,OAAOI,QAAQ,sBAAqCF,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,MAE3DN,E,EAXLD,EAAEqB,iBACF,IAAK,IAAIC,EAAQ,EAAGA,EAAQxB,EAAYM,MAAOkB,IAAQC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst buttonSubmit = document.querySelector('button[type=\"submit\"]');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    };\n  });\n};\n\nbuttonSubmit.addEventListener('click', (e) => {\n  e.preventDefault();\n  for (let index = 0; index < amountInput.value; index ++) {\n    let time = index * Number(stepInput.value) + Number(delayInput.value);\n    setTimeout (() => {\n      createPromise(index + 1, time)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }, time);\n  };\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function createPromise(position, delay) {\n\n//   const promise =  new Promise((resolve, reject) => {\n\n//     const shouldResolve = Math.random() > 0.3;\n\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//           // Fulfill\n//           resolve('+');\n//           console.log(promise);\n//         } else {\n//           // Reject\n//           reject('-');\n//           console.log(promise);\n//         };\n//     }, delayInput.textContent);\n//   });\n// };\n\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","e","time","index","Number","value","setTimeout","position","delay","shouldResolve","Math","random","Promise","resolve","reject","then","param","Notify","success","concat","catch","failure","preventDefault","index1","_loop"],"version":3,"file":"03-promises.fa5902c3.js.map"}