{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAcH,SAASC,cAAc,wBAG3C,SAASG,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,G,CATZN,SAASC,cAAc,yBAc/BY,iBAAiB,SAAUC,IACtCA,EAAEC,iBACF,IAAK,IAAIC,EAAQ,EAAGA,EAAQb,EAAYc,MAAOD,IAAU,CACvD,IAAIE,EAAOF,EAAQG,OAAOjB,EAAUe,OAASE,OAAOpB,EAAWkB,OAC/DG,YAAY,KACVhB,EAAcY,EAAQ,EAAGE,GACxBG,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBT,EAAAyB,OAAOC,QAAQ,uBAAqBlB,QAAiBC,MAAU,IAEhEkB,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,MAClBT,EAAAyB,OAAOG,QAAQ,sBAAoBpB,QAAeC,MAAU,GAC5D,GACDY,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst buttonSubmit = document.querySelector('button[type=\"submit\"]');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    };\n  });\n};\n\nbuttonSubmit.addEventListener('click', (e) => {\n  e.preventDefault();\n  for (let index = 0; index < amountInput.value; index ++) {\n    let time = index * Number(stepInput.value) + Number(delayInput.value);\n    setTimeout (() => {\n      createPromise(index + 1, time)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }, time);\n  };\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function createPromise(position, delay) {\n\n//   const promise =  new Promise((resolve, reject) => {\n\n//     const shouldResolve = Math.random() > 0.3;\n\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//           // Fulfill\n//           resolve('+');\n//           console.log(promise);\n//         } else {\n//           // Reject\n//           reject('-');\n//           console.log(promise);\n//         };\n//     }, delayInput.textContent);\n//   });\n// };\n\n\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$delayInput","document","querySelector","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","addEventListener","e","preventDefault","index","value","time","Number","setTimeout","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.ec9f2209.js.map"}